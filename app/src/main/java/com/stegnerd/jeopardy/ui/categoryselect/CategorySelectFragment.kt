package com.stegnerd.jeopardy.ui.categoryselect

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.fragment.app.Fragment
import androidx.fragment.app.viewModels
import androidx.recyclerview.widget.ListAdapter
import com.stegnerd.jeopardy.data.model.Category
import com.stegnerd.jeopardy.databinding.CategorySelectListFragmentBinding
import dagger.hilt.android.AndroidEntryPoint

/**
 * Fragment for selecting a  [Category] from a list.
 */
@AndroidEntryPoint
class CategorySelectFragment : Fragment() {

    /**
     * ViewModel for the view. Contains the list of categories
     *
     *  viewModel is injected with dagger-hilt viewmodelinject
     */
    private val categorySelectViewModel: CategorySelectViewModel by viewModels()

    /**
     * [ListAdapter] for the list of [Category]
     */
    private lateinit var adapter: CategorySelectAdapter

    /**
     * Class generated by data binding. Represents an instance of the ui.
     */
    private lateinit var binding: CategorySelectListFragmentBinding

    /**
     *  Happens right after OnCreate() and before OnActivityCreated(). This is called when its time for the fragment to draw the ui.
     */
    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {
        // inflate the binding so that it can be interacted with.
        // Also bind the view model in the ui to the fragment instance.
        binding = CategorySelectListFragmentBinding.inflate(inflater, container, false).apply {
            viewModel = categorySelectViewModel
        }

        // since our viewModel has livedata, we need to instantiate the lifecycle owner
        // if we don't it won't update
        // this is the CategorySelectListFragmentBinding.viewlifecycleowner
        binding.lifecycleOwner = viewLifecycleOwner
        // bind the recycler view to the list adapter
        setupAdapter()

        // Get the list of categories and update the view
        categorySelectViewModel.loadCategories()

        return binding.root
    }

    /**
     * Binds the category list recyclerview to the [CategorySelectAdapter]
     */
    private fun setupAdapter(){
        val viewmodel = binding.viewModel
        if(viewmodel != null){
            adapter = CategorySelectAdapter(viewmodel)
            binding.CategoryList.adapter = adapter
        }
    }
}